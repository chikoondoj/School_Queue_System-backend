var pg = require("pg");

var PG = exports = module.exports = function PG (connection, settings) {
	this._pg = pg;
	this._connection = connection;
	this._settings = settings;
	return this;
}



PG.prototype.connect = PG.prototype.c = function(conn) {
	this._connection = conn;
	return this;
}

PG.prototype.settings = PG.prototype.s = function(sets) {
	this._settings = sets;
	return this;
}


PG.prototype.error = PG.prototype.e = function(handler) {
	this._error = handler;
	return this;
}

PG.prototype.compile = PG.prototype.cm = function(q, o) {
	if(!o) var o = {};
	
	if(q[q.length-1] === ";") q = q.substr(0, q.length-1); //eliminate ending ';'
	if(o.o) q += " ORDER BY " + o.o;
	if(o.l) q += " LIMIT " + o.l;
	q += ";"; // Add ending ';'
	return q;
}

PG.prototype.query = PG.prototype.q = function(query, values, options, callback) {
	if(typeof values === "function") {var callback = values; var values = []; var options = {};}
	if(typeof values === "object" && !(values instanceof Array)) {var callback = options; var options = values; var values = [];}
	if(typeof options === "function") {var callback = options; var options = {};}

	var errHandler = this._error;


	if(typeof query === "string") {
		var query = this.compile(query, options);
		this._pg.connect(this._connection, function(err, client, done) {
			if(err && errHandler) errHandler(err);
			else if(err) {throw err;}
			else {
				client.query(query, values, function(err, result) {
					done();
					if(err && errHandler) errHandler(err);
					else {
						callback(err, result);
					}
				})
			}
		})
	}
	else if(query instanceof Array) {
		console.log("Arrays are not yet supported. Feel free to add this functionality!");
	}
	return this;
}

PG.prototype.update = PG.prototype.u = function(table, where, values, updates, callback) {
	if(typeof updates === "function") {
		var callback = updates;
		var updates = values;
		var values = [];
	}


	if(updates && typeof updates === "object" && !(updates instanceof Array) && updates !== {}) {

		var q = "UPDATE " + table + " SET ";

		var i = values.length + 1;
		var sets = [];
		for(key in updates) {
			var value = updates[key];
			sets.push(key + "=" + "$" + i);
			values.push(value);
			i++;
		}
		q += sets.join(", ");
		
		q += " WHERE " + where;


		this.query(q, values, callback);
		return this;
	}
	else {
		callback(new Error("No updates!"));
	}
}

PG.prototype.delete = PG.prototype.del = PG.prototype.d = function(table, where, values, options, callback) {
	if(typeof values === "function") {var callback = values; var values = []; var options = {};}
	if(typeof values === "object" && !(values instanceof Array)) {var callback = options; var options = values; var values = [];}
	if(typeof options === "function") {var callback = options; var options = {};}

	var q = "DELETE FROM " + table + " WHERE " + where;

	this.query(q, values, options, callback);
	return this;
}
